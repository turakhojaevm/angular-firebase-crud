1. Create firebase project
2. Create realtime-database in firebase
3. Create firestore-database in firebase
4. Create employee collection in firesotre
5. Create angular project
6. In environment files copy API keys
7. Install firebase modules npm i @angular/fire
8. Import all firebase modules in app.module.ts
	AngularFireModule
	AngularFireDatabaseModule
	AngularFireStorageModule
9. Import environment file in app.module.ts
10. Add API keys in app.module.ts AngularFireModule.initializeApp(environment.firebaseConfig)
11. Create html template
12. Create service
13. Import AngularFirestore in service and inject in constructor
14. Create a service method for creating employee
	create_NewEmployee(employee) {
		return this.angularFire.collection('COLLECTION_NAME').add(employee);
	}
	// COLLECTION_NAME - from employee collection in firesotre
15. Import service in app.module.ts
16. In template create click function to create a new employee
17. From input values create object and two way data biding
	let Record = {name: this.employeeName, age: this.employeeAge, address: this.employeeAddress};
18. Call service in app.component.ts
	CreateRecord() {
    	 let Record = {name: this.employeeName, age: this.employeeAge, address: this.employeeAddress};

       	 this.crudService.create_Newemployee(Record).then((res: any) => {
           this.employeeName = '';
           this.employeeAge = undefined;
           this.employeeAddress = '';
           console.log(res);
           this.message = 'Employee date save done';
         }).catch(error => {
           console.log(error)
         });
       }
	// then and catch are promise
19. To get employees data create a service method
	get_Appemployee() {
         return this.angularFirestore.collection('Employee').snapshotChanges();
        }
20. To show data in template use this below code.
	this.crudService.get_Appemployee().subscribe(data => {
         this.employee = data.map(e => e.payload.doc.data());
         console.log(this.employee);
        });
21. To create employee follow this stapes
	1. Add isEdit: true in employee object
	2. Add  *ngIf="!item.isEdit; else elseBlock" in card
	3. <ng-template #elseBlock>
        <div class="card mb-3">
          <div class="card-body">
            <div class="card-title">
              Edit Employee
            </div>
            <div class="row">
              <div class="form-group">
                <div class="col-md-12">
                  <input type="text" [(ngModel)]="item.editname" class="form-control">
                </div>
                <div class="col-md-12">
                  <input type="number" [(ngModel)]="item.editage" class="form-control">
                </div>
                <div class="col-md-12">
                  <input type="text" [(ngModel)]="item.address" class="form-control">
                </div>
              </div>
            </div>

            <a href="#" class="btn btn-danger" (click)="item.isEdit = false">Cancel</a>
            <a href="#" class="btn btn-primary" (click)="Updaterecord(item)">Update</a>

          </div>
        </div>
      </ng-template>

22. Create Cancel function put this condition item.isEdit = false
23. Create Updaterecord function Updaterecord(recordData: any) {
    let record = {name: recordData.editname, age: recordData.editage, address: recordData.addresss};
    this.crudService.update_employee(recordData.id, record);
    recordData.isEdit = false;
  }
24. Update service
	update_employee(recordid: any, record: any) {
         this.angularFirestore.doc('Employee/' + recordid).update(record);
        }
25. Create Delete function DeleteEmployee
	DeleteEmployee(recordId: any) {
          alert('Are you shure to delete this record?');
          this.crudService.deleteRecord(recordId);
        }
26. Create delete service
	deleteRecord(recordId: any) {
         this.angularFirestore.doc('Employee/' + recordId).delete();
        }
27. Last step push changes in github!







